<?php

namespace MLL\Utils\ICA\Client;

use MLL\Utils\ICA\Client\Resource\AnalysisStorage;
use MLL\Utils\ICA\Client\Resource\Bundle;
use MLL\Utils\ICA\Client\Resource\BundleData;
use MLL\Utils\ICA\Client\Resource\BundleDataLinkingBatch;
use MLL\Utils\ICA\Client\Resource\BundleDataUnlinkingBatch;
use MLL\Utils\ICA\Client\Resource\BundlePipeline;
use MLL\Utils\ICA\Client\Resource\BundleSample;
use MLL\Utils\ICA\Client\Resource\BundleTool;
use MLL\Utils\ICA\Client\Resource\Connector as Connector1;
use MLL\Utils\ICA\Client\Resource\Data;
use MLL\Utils\ICA\Client\Resource\DataFormat;
use MLL\Utils\ICA\Client\Resource\EntitledBundle;
use MLL\Utils\ICA\Client\Resource\EntitlementDetail;
use MLL\Utils\ICA\Client\Resource\EventCode;
use MLL\Utils\ICA\Client\Resource\EventLog;
use MLL\Utils\ICA\Client\Resource\Job;
use MLL\Utils\ICA\Client\Resource\MetadataModel;
use MLL\Utils\ICA\Client\Resource\NotificationChannel;
use MLL\Utils\ICA\Client\Resource\Pipeline;
use MLL\Utils\ICA\Client\Resource\PipelineLanguage;
use MLL\Utils\ICA\Client\Resource\Project;
use MLL\Utils\ICA\Client\Resource\ProjectAnalysis;
use MLL\Utils\ICA\Client\Resource\ProjectAnalysisCreationBatch;
use MLL\Utils\ICA\Client\Resource\ProjectAnalysisStorage;
use MLL\Utils\ICA\Client\Resource\ProjectBase;
use MLL\Utils\ICA\Client\Resource\ProjectCustomEvents;
use MLL\Utils\ICA\Client\Resource\ProjectCustomNotificationSubscriptions;
use MLL\Utils\ICA\Client\Resource\ProjectData;
use MLL\Utils\ICA\Client\Resource\ProjectDataCopyBatch;
use MLL\Utils\ICA\Client\Resource\ProjectDataLinkingBatch;
use MLL\Utils\ICA\Client\Resource\ProjectDataMoveBatch;
use MLL\Utils\ICA\Client\Resource\ProjectDataTransfer;
use MLL\Utils\ICA\Client\Resource\ProjectDataUnlinkingBatch;
use MLL\Utils\ICA\Client\Resource\ProjectDataUpdateBatch;
use MLL\Utils\ICA\Client\Resource\ProjectNotificationSubscriptions;
use MLL\Utils\ICA\Client\Resource\ProjectPermission;
use MLL\Utils\ICA\Client\Resource\ProjectPipeline;
use MLL\Utils\ICA\Client\Resource\ProjectSample;
use MLL\Utils\ICA\Client\Resource\ProjectSampleBatch;
use MLL\Utils\ICA\Client\Resource\ProjectWorkflowSession;
use MLL\Utils\ICA\Client\Resource\ReferenceSet;
use MLL\Utils\ICA\Client\Resource\Region;
use MLL\Utils\ICA\Client\Resource\Sample;
use MLL\Utils\ICA\Client\Resource\SequencingRun;
use MLL\Utils\ICA\Client\Resource\StorageBundle;
use MLL\Utils\ICA\Client\Resource\StorageConfiguration;
use MLL\Utils\ICA\Client\Resource\StorageCredentials;
use MLL\Utils\ICA\Client\Resource\System;
use MLL\Utils\ICA\Client\Resource\Token;
use MLL\Utils\ICA\Client\Resource\User;
use MLL\Utils\ICA\Client\Resource\Workgroup;
use Saloon\Contracts\Authenticator;
use Saloon\Http\Auth\AccessTokenAuthenticator;
use Saloon\Http\Connector;

/**
 * ICA Rest API
 *
 * This API can be used to interact with Illumina Connected Analytics.<br>
 * <h2>Authentication</h2>
 * <p>
 * Authentication to the  API can be done in multiple ways:<br>
 * <ul><li>For the entire API, except for the POST /tokens endpoint: API-key + JWT</li>
 * <li>Only for the POST /tokens endpoint: API-key + Basic Authentication</li></ul>
 * </p>
 * <p>
 * <h4>API-key</h4>
 * API keys are managed within the Illumina portal where you can manage your profile after you have logged on. The API-key has to be provided in the X-API-Key header parameter when executing API calls to ICA. In the background, a JWT will be requested at the IDP of Illumina to create a session. A good practice is to not use the API-key for every API call, but to first generate a JWT and to use that for authentication in subsequent calls.<br>
 * </p>
 * <p>
 * <h4>JWT</h4>
 * To avoid using an API-key for each call, we recommend to request a JWT via the POST /tokens endpoint  using this API-key. The JWT will expire after a pre-configured period specified by a tenant administrator through the IAM console in the Illumina portal. The JWT is the preferred way for authentication.<br>A not yet expired, still valid JWT could be refreshed using the POST /tokens:refresh endpoint.<br>Refreshing the JWT is not possible if the JWT was generated by using an API-key.<br>
 * </p>
 * <p>
 * <h4>Basic Authentication</h4>
 * Basic authentication is only supported by the POST /tokens endpoint for generating a JWT. Use "Basic base64encoded(emailaddress:password)" in the "Authorization" header parameter for this authentication method. In case having access to multiple tenants using the same email-address, also provide the "tenant" request parameter to indicate what tenant you would like to request a JWT for.
 * </p>
 * <p>
 * <h2>Compression</h2>
 * If the API client provides request header 'Accept-Encoding' with value 'gzip', then the API applies GZIP compression on the JSON response. This significantly reduces the size and thus the download time of the response, which results in faster end-to-end API calls. In case of compression, the API also provides response header 'Content-Encoding' with value 'gzip', as indication for the client that decompression is required.
 * </p>
 */
class ICAClient extends Connector
{
	public function resolveBaseUrl(): string
	{
		return env('ICA_HOST');
	}

    public function defaultAuth(): ?Authenticator
    {
        return new AccessTokenAuthenticator(env('ICA_API_KEY'));
    }


    public function analysisStorage(): AnalysisStorage
	{
		return new AnalysisStorage($this);
	}


	public function bundle(): Bundle
	{
		return new Bundle($this);
	}


	public function bundleData(): BundleData
	{
		return new BundleData($this);
	}


	public function bundleDataLinkingBatch(): BundleDataLinkingBatch
	{
		return new BundleDataLinkingBatch($this);
	}


	public function bundleDataUnlinkingBatch(): BundleDataUnlinkingBatch
	{
		return new BundleDataUnlinkingBatch($this);
	}


	public function bundlePipeline(): BundlePipeline
	{
		return new BundlePipeline($this);
	}


	public function bundleSample(): BundleSample
	{
		return new BundleSample($this);
	}


	public function bundleTool(): BundleTool
	{
		return new BundleTool($this);
	}


	public function connector(): Connector1
	{
		return new Connector($this);
	}


	public function data(): Data
	{
		return new Data($this);
	}


	public function dataFormat(): DataFormat
	{
		return new DataFormat($this);
	}


	public function entitledBundle(): EntitledBundle
	{
		return new EntitledBundle($this);
	}


	public function entitlementDetail(): EntitlementDetail
	{
		return new EntitlementDetail($this);
	}


	public function eventCode(): EventCode
	{
		return new EventCode($this);
	}


	public function eventLog(): EventLog
	{
		return new EventLog($this);
	}


	public function job(): Job
	{
		return new Job($this);
	}


	public function metadataModel(): MetadataModel
	{
		return new MetadataModel($this);
	}


	public function notificationChannel(): NotificationChannel
	{
		return new NotificationChannel($this);
	}


	public function pipeline(): Pipeline
	{
		return new Pipeline($this);
	}


	public function pipelineLanguage(): PipelineLanguage
	{
		return new PipelineLanguage($this);
	}


	public function project(): Project
	{
		return new Project($this);
	}


	public function projectAnalysis(): ProjectAnalysis
	{
		return new ProjectAnalysis($this);
	}


	public function projectAnalysisCreationBatch(): ProjectAnalysisCreationBatch
	{
		return new ProjectAnalysisCreationBatch($this);
	}


	public function projectAnalysisStorage(): ProjectAnalysisStorage
	{
		return new ProjectAnalysisStorage($this);
	}


	public function projectBase(): ProjectBase
	{
		return new ProjectBase($this);
	}


	public function projectCustomEvents(): ProjectCustomEvents
	{
		return new ProjectCustomEvents($this);
	}


	public function projectCustomNotificationSubscriptions(): ProjectCustomNotificationSubscriptions
	{
		return new ProjectCustomNotificationSubscriptions($this);
	}


	public function projectData(): ProjectData
	{
		return new ProjectData($this);
	}


	public function projectDataCopyBatch(): ProjectDataCopyBatch
	{
		return new ProjectDataCopyBatch($this);
	}


	public function projectDataLinkingBatch(): ProjectDataLinkingBatch
	{
		return new ProjectDataLinkingBatch($this);
	}


	public function projectDataMoveBatch(): ProjectDataMoveBatch
	{
		return new ProjectDataMoveBatch($this);
	}


	public function projectDataTransfer(): ProjectDataTransfer
	{
		return new ProjectDataTransfer($this);
	}


	public function projectDataUnlinkingBatch(): ProjectDataUnlinkingBatch
	{
		return new ProjectDataUnlinkingBatch($this);
	}


	public function projectDataUpdateBatch(): ProjectDataUpdateBatch
	{
		return new ProjectDataUpdateBatch($this);
	}


	public function projectNotificationSubscriptions(): ProjectNotificationSubscriptions
	{
		return new ProjectNotificationSubscriptions($this);
	}


	public function projectPermission(): ProjectPermission
	{
		return new ProjectPermission($this);
	}


	public function projectPipeline(): ProjectPipeline
	{
		return new ProjectPipeline($this);
	}


	public function projectSample(): ProjectSample
	{
		return new ProjectSample($this);
	}


	public function projectSampleBatch(): ProjectSampleBatch
	{
		return new ProjectSampleBatch($this);
	}


	public function projectWorkflowSession(): ProjectWorkflowSession
	{
		return new ProjectWorkflowSession($this);
	}


	public function referenceSet(): ReferenceSet
	{
		return new ReferenceSet($this);
	}


	public function region(): Region
	{
		return new Region($this);
	}


	public function sample(): Sample
	{
		return new Sample($this);
	}


	public function sequencingRun(): SequencingRun
	{
		return new SequencingRun($this);
	}


	public function storageBundle(): StorageBundle
	{
		return new StorageBundle($this);
	}


	public function storageConfiguration(): StorageConfiguration
	{
		return new StorageConfiguration($this);
	}


	public function storageCredentials(): StorageCredentials
	{
		return new StorageCredentials($this);
	}


	public function system(): System
	{
		return new System($this);
	}


	public function token(): Token
	{
		return new Token($this);
	}


	public function user(): User
	{
		return new User($this);
	}


	public function workgroup(): Workgroup
	{
		return new Workgroup($this);
	}
}
